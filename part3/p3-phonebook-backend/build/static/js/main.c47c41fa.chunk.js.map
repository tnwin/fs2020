{"version":3,"sources":["services/persons.js","components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","App.js","index.js"],"names":["url","personService","create","newPerson","axios","post","then","res","data","catch","err","console","log","response","getAll","get","update","put","id","remove","delete","Filter","text","filter","handleInput","value","onChange","placeholder","PersonForm","addPerson","name","number","handleNameInput","handleNumberInput","onSubmit","required","maxLength","pattern","type","Persons","persons","removePerson","map","person","onClick","Notification","message","className","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setFilter","notificationType","setNotificationType","notificationMsg","setNotificationMsg","timeoutId","setTimeoutId","isLoading","setIsLoading","useEffect","resInitialPersons","includes","notify","e","findDuplicate","find","pObj","confirmUpdate","window","confirm","updatePerson","resUpdatedPerson","error","prevPersons","p","sanitizeString","string","toLowerCase","trim","toDisplay","indexOf","msg","clearTimeout","setTimeout","target","preventDefault","duplicate","resPerson","concat","length","replace","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c47c41fa.chunk.js","sourcesContent":["import axios from 'axios';\n\n// const url = \"http://localhost:3001/persons\";\n// const url = 'http://localhost:3001/api/persons';\n// const url = 'https://powerful-dusk-23995.herokuapp.com/api/persons';\nconst url = '/api/persons';\n\n// CREATE\nconst create = (newPerson) =>\n  axios\n    .post(url, newPerson)\n    .then((res) => res.data)\n    .catch((err) => {\n      console.log('Error in POST request:', err.response.data);\n      return err.response.data;\n    });\n\n// RETRIEVE\nconst getAll = () =>\n  axios\n    .get(url)\n    .then((res) => res.data)\n    .catch((err) => {\n      console.log(\n        'Error in GET all request ー (connection to server):',\n        err.response.data\n      );\n      return err.response.data;\n    });\n\n// UPDATE\nconst update = (newPerson) =>\n  axios\n    .put(`${url}/${newPerson.id}`, newPerson)\n    .then((res) => res.data)\n    .catch((err) => {\n      console.log('Error in PUT request:', err.response.data);\n      return err.response.data;\n    });\n\n// DELETE\nconst remove = (id) =>\n  axios\n    .delete(`${url}/${id}`)\n    .then((res) => res.data)\n    .catch((err) => {\n      console.log('Error in DELETE request:', err);\n      return err.response.data;\n    });\n\n// To avoid warning about missing const\n// Could've also used named exports\nconst personService = { create, getAll, update, remove };\n\nexport default personService;\n","import React from \"react\";\n\n/**\n * The filter component\n */\nconst Filter = ({ text, filter, handleInput }) => (\n  <div>\n    {text}{\" \"}\n    <input\n      value={filter}\n      onChange={handleInput}\n      placeholder=\"Enter a name．．．\"\n    />\n  </div>\n);\n\nexport default Filter;\n","import React from 'react';\n\n/**\n * Form component to add name and number\n */\nconst PersonForm = ({\n  addPerson,\n  name,\n  number,\n  handleNameInput,\n  handleNumberInput,\n}) => (\n  <form onSubmit={addPerson}>\n    <table>\n      <tbody>\n        <tr>\n          <td>Name:</td>\n          <td>\n            <input\n              value={name}\n              onChange={handleNameInput}\n              placeholder=\"New name or update\"\n              required\n              maxLength=\"30\"\n            />\n          </td>\n        </tr>\n        <tr>\n          <td>Number:</td>\n          <td>\n            <input\n              value={number}\n              onChange={handleNumberInput}\n              placeholder=\"+358 (0) 2941 911\"\n              pattern=\"^[+]{0,1}[(\\)\\-\\s\\./0-9]*$\"\n              maxLength=\"30\"\n            />\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n);\n\nexport default PersonForm;\n","import React from 'react';\n\n/**\n * Display all of the contacts in the phonebook with a delete button\n */\nconst Persons = ({ persons, removePerson }) => (\n  <>\n    {persons.map((person) => (\n      <tr key={person.name}>\n        <td>{person.name}</td>\n        <td>{person.number}</td>\n        <td>\n          <button onClick={() => removePerson(person.id, person.name)}>\n            delete\n          </button>\n        </td>\n      </tr>\n    ))}\n  </>\n);\n\nexport default Persons;\n","import React from \"react\";\nimport \"../index.css\";\n\nconst Notification = ({ type, message }) => (\n  <div className={type}>{message}</div>\n);\n\nexport default Notification;\n","import React, { useState, useEffect } from 'react';\nimport personService from './services/persons';\nimport './App.css';\n\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport Notification from './components/Notification';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [filter, setFilter] = useState('');\n  const [notificationType, setNotificationType] = useState(null);\n  const [notificationMsg, setNotificationMsg] = useState(null);\n  const [timeoutId, setTimeoutId] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // RETRIEVE  all of the contact from the phonebook at startup\n  useEffect(() => {\n    personService\n      .getAll()\n      .then((resInitialPersons) => {\n        // Case cannot connect to server\n        if (\n          typeof resInitialPersons === 'string' &&\n          resInitialPersons.includes('Proxy error')\n        )\n          return notify('🚫 Cannot connect to server.', 'error');\n        else if (resInitialPersons) {\n          setPersons(resInitialPersons);\n          setIsLoading(false);\n        }\n      })\n      .catch((e) =>\n        console.log('Error retrieving from server on initial run:', e),\n      );\n    // Disable b/c also using notify() outside of useEffect\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // CREATE and add a person to the phonebook\n  // UPDATE if the person is already added\n  // Notify with update\n  // 🛠 Fixed addPerson only add if response is a person\n  const addPerson = (e) => {\n    e.preventDefault();\n    const newPerson = {\n      name: newName.trim(),\n      number: newNumber.trim(),\n      // ID handled on server side\n    };\n    // checkDuplicate(newPerson)\n    const duplicate = findDuplicate(newPerson);\n    // If duplicate, confirm update\n    typeof duplicate !== 'undefined'\n      ? confirmUpdate(duplicate, newNumber)\n      : // : setPersons((prevPersons) => prevPersons.concat(newPerson));\n        // If not duplicate, add person, clear inputs, notify\n        personService\n          .create(newPerson)\n          .then((resPerson) => {\n            // Case cannot connect to server\n            if (\n              typeof resPerson === 'string' &&\n              resPerson.includes('Proxy error')\n            )\n              return notify(\n                `🚫 Failed to add ${newPerson.name} ${newPerson.number}. Cannot connect to server. Refreshing will prevent you from viewing the phonebook.`,\n                'error',\n              );\n\n            // Case receives error\n            if (resPerson.error)\n              return notify(`🚫 ${resPerson.error}`, 'error');\n\n            // Case receives (person) object\n            if (typeof resPerson === 'object') {\n              setPersons((prevPersons) => prevPersons.concat(resPerson));\n              notify(`🆕 Added ${newPerson.name}`);\n              setNewName('');\n              setNewNumber('');\n            }\n          })\n          .catch((err) => {\n            console.log('Error from addPerson', err);\n          });\n  };\n\n  // DELETE a person from the phonebook\n  // Notify with success or error\n  const removePerson = (id, name) =>\n    window.confirm(`🚨 Delete ${name.replace(/\\s+/g, ' ')} ?`)\n      ? personService\n          .remove(id)\n          .then((res) => {\n            if (typeof res === 'string' && res.includes('Proxy error'))\n              return notify(\n                `🚫 Failed to delete ${name}. Cannot connect to server. Refreshing will prevent you from viewing the phonebook.`,\n                'error',\n              );\n            setPersons((prevPersons) => prevPersons.filter((p) => p.id !== id));\n            notify(`👋 Deleted ${name}`);\n          })\n          .catch((e) => {\n            // No longer the expected error after backend modification\n            console.log('Error deleting person', e);\n            setPersons((prevPersons) => prevPersons.filter((p) => p.id !== id));\n            notify(\n              `🚫 Information of ${name} has already been removed from server`,\n              'error',\n            );\n          })\n      : null;\n\n  /************************************** ======= **************************************/\n  /************************************** Helpers **************************************/\n  /************************************** ======= **************************************/\n\n  // Set filter with value from the input\n  const handleFilterInput = (e) => setFilter(() => e.target.value);\n\n  // Set newName with value from the input\n  const handleNameInput = (e) => setNewName(e.target.value);\n\n  // Set filterWith with value from the input\n  const handleNumberInput = (e) => setNewNumber(e.target.value);\n\n  // Return true if the person is already in the phonebook\n  // const checkDuplicate = (person) =>\n  // persons.map((pObj) => pObj.name).includes(person.name);\n\n  // Return the person object if they're already in the phonebook, undefined otherwise\n  const findDuplicate = (person) =>\n    persons.find((pObj) => pObj.name === person.name);\n\n  // Display alert with given name\n  // const alertDuplicate = (name) =>\n  //   alert(`${name} is already added to phonebook`);\n\n  // Alert and prompt update confirmation\n  // Call updatePerson with the updated inputted phone number ***\n  const confirmUpdate = (person, newNumber) =>\n    window.confirm(\n      `🚨 ${person.name} is already added to phonebook, replace the old number with this new one?`,\n    )\n      ? updatePerson({ ...person, number: newNumber })\n      : null;\n\n  // Update the existing person with new inputted phone number\n  const updatePerson = (person) =>\n    personService.update(person).then((resUpdatedPerson) => {\n      // Case cannot connect server\n      if (\n        typeof resUpdatedPerson === 'string' &&\n        resUpdatedPerson.includes('Proxy error')\n      )\n        return notify(\n          `🚫 Failed to update ${person.name}. Cannot connect to server. Refreshing will prevent you from viewing the phonebook.`,\n          'error',\n        );\n      // if (!resUpdatedPerson) return null; // return null when response is not a person\n      // Case number validation error when updating\n      if (resUpdatedPerson.error)\n        notify(`🚫 ${resUpdatedPerson.error}`, 'error');\n      // Case normal update\n      else if (typeof resUpdatedPerson === 'object') {\n        setPersons((prevPersons) =>\n          prevPersons.map((p) => (p.id === person.id ? resUpdatedPerson : p)),\n        );\n        notify(\n          `🆙 Updated ${resUpdatedPerson.name}  with ${resUpdatedPerson.number}`,\n        );\n        setNewName('');\n        setNewNumber('');\n      }\n    });\n  // personService\n  //   .create(newPerson)\n  //   .then((resPerson) => {\n  //     // Case receives error\n  //     if (resPerson.error) notify(`🚫 ${resPerson.error}`, 'error');\n  //     // Case receives (person) object\n  //     else if (typeof resPerson === 'object') {\n  //       setPersons((prevPersons) => prevPersons.concat(resPerson));\n  //       notify(`🆕 Added ${newPerson.name}`);\n  //       setNewName('');\n  //       setNewNumber('');\n  //     }\n  //   })\n  //   .catch((e) => {\n  //     console.log('Error from addPerson', e);\n  //   });\n  // Return lowercased and trimmed string\n  const sanitizeString = (string) => string.toLowerCase().trim();\n\n  // Array of persons used to display (filtered or unfiltered)\n  // 🛠 Check that person actually exists first, otherwise return empty array to allow following .map's to work\n  const toDisplay = persons\n    ? persons.filter(\n        (person) =>\n          sanitizeString(person.name).indexOf(`${sanitizeString(filter)}`) !==\n          -1,\n      )\n    : [];\n\n  // Clear previous notifications and notify user with a message and type\n  const notify = (msg, type = 'success') => {\n    clearTimeout(timeoutId);\n    setNotificationType(type);\n    setNotificationMsg(msg);\n    setTimeoutId(\n      setTimeout(() => {\n        setNotificationType(null);\n        setNotificationMsg(null);\n      }, 5000),\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <h2>Phonebook</h2>\n      <Notification type={notificationType} message={notificationMsg} />\n\n      <Filter\n        text=\"Filter by\"\n        filter={filter}\n        handleInput={handleFilterInput}\n      />\n\n      <h3>Add a new</h3>\n      <PersonForm\n        addPerson={addPerson}\n        name={newName}\n        number={newNumber}\n        handleNameInput={handleNameInput}\n        handleNumberInput={handleNumberInput}\n      />\n\n      <h3>Numbers</h3>\n      {/* Show loading while trying to retrieve persons/contacts  */}\n      {isLoading ? (\n        <em>．．．Connecting to server．．．</em>\n      ) : (\n        <table>\n          <thead>\n            {!persons.length ? (\n              <strong>\n                <em>The phonebook is empty! What have you done??!!</em>\n              </strong>\n            ) : (\n              <tr>\n                <th>Name</th>\n                <th>Number</th>\n                <th></th>\n              </tr>\n            )}\n          </thead>\n          <tbody>\n            <Persons\n              persons={toDisplay}\n              filter={filter}\n              removePerson={removePerson}\n              sanitizeString={sanitizeString}\n            />\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}